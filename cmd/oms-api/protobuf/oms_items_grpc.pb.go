// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: oms_items.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OmsItemService_CreateItem_FullMethodName     = "/omsItemService/CreateItem"
	OmsItemService_GetItemById_FullMethodName    = "/omsItemService/GetItemById"
	OmsItemService_GetAllItems_FullMethodName    = "/omsItemService/GetAllItems"
	OmsItemService_UpdateItemById_FullMethodName = "/omsItemService/UpdateItemById"
	OmsItemService_DeleteItemById_FullMethodName = "/omsItemService/DeleteItemById"
)

// OmsItemServiceClient is the client API for OmsItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmsItemServiceClient interface {
	CreateItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetItemById(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetAllItems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllItemResponse, error)
	UpdateItemById(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	DeleteItemById(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
}

type omsItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOmsItemServiceClient(cc grpc.ClientConnInterface) OmsItemServiceClient {
	return &omsItemServiceClient{cc}
}

func (c *omsItemServiceClient) CreateItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, OmsItemService_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsItemServiceClient) GetItemById(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, OmsItemService_GetItemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsItemServiceClient) GetAllItems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllItemResponse, error) {
	out := new(GetAllItemResponse)
	err := c.cc.Invoke(ctx, OmsItemService_GetAllItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsItemServiceClient) UpdateItemById(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, OmsItemService_UpdateItemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsItemServiceClient) DeleteItemById(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, OmsItemService_DeleteItemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmsItemServiceServer is the server API for OmsItemService service.
// All implementations must embed UnimplementedOmsItemServiceServer
// for forward compatibility
type OmsItemServiceServer interface {
	CreateItem(context.Context, *ItemRequest) (*ItemResponse, error)
	GetItemById(context.Context, *GetItemRequest) (*ItemResponse, error)
	GetAllItems(context.Context, *EmptyRequest) (*GetAllItemResponse, error)
	UpdateItemById(context.Context, *UpdateItemRequest) (*ItemResponse, error)
	DeleteItemById(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	mustEmbedUnimplementedOmsItemServiceServer()
}

// UnimplementedOmsItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOmsItemServiceServer struct {
}

func (UnimplementedOmsItemServiceServer) CreateItem(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedOmsItemServiceServer) GetItemById(context.Context, *GetItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemById not implemented")
}
func (UnimplementedOmsItemServiceServer) GetAllItems(context.Context, *EmptyRequest) (*GetAllItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedOmsItemServiceServer) UpdateItemById(context.Context, *UpdateItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemById not implemented")
}
func (UnimplementedOmsItemServiceServer) DeleteItemById(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemById not implemented")
}
func (UnimplementedOmsItemServiceServer) mustEmbedUnimplementedOmsItemServiceServer() {}

// UnsafeOmsItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmsItemServiceServer will
// result in compilation errors.
type UnsafeOmsItemServiceServer interface {
	mustEmbedUnimplementedOmsItemServiceServer()
}

func RegisterOmsItemServiceServer(s grpc.ServiceRegistrar, srv OmsItemServiceServer) {
	s.RegisterService(&OmsItemService_ServiceDesc, srv)
}

func _OmsItemService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsItemServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsItemService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsItemServiceServer).CreateItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsItemService_GetItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsItemServiceServer).GetItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsItemService_GetItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsItemServiceServer).GetItemById(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsItemService_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsItemServiceServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsItemService_GetAllItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsItemServiceServer).GetAllItems(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsItemService_UpdateItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsItemServiceServer).UpdateItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsItemService_UpdateItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsItemServiceServer).UpdateItemById(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsItemService_DeleteItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsItemServiceServer).DeleteItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsItemService_DeleteItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsItemServiceServer).DeleteItemById(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OmsItemService_ServiceDesc is the grpc.ServiceDesc for OmsItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmsItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsItemService",
	HandlerType: (*OmsItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _OmsItemService_CreateItem_Handler,
		},
		{
			MethodName: "GetItemById",
			Handler:    _OmsItemService_GetItemById_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _OmsItemService_GetAllItems_Handler,
		},
		{
			MethodName: "UpdateItemById",
			Handler:    _OmsItemService_UpdateItemById_Handler,
		},
		{
			MethodName: "DeleteItemById",
			Handler:    _OmsItemService_DeleteItemById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oms_items.proto",
}
