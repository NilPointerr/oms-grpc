/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: oms_order.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./oms_order_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.OrderServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.OrderServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CreateOrderRequest,
 *   !proto.OrderResponse>}
 */
const methodDescriptor_OrderService_CreateOrder = new grpc.web.MethodDescriptor(
  '/OrderService/CreateOrder',
  grpc.web.MethodType.UNARY,
  proto.CreateOrderRequest,
  proto.OrderResponse,
  /**
   * @param {!proto.CreateOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.OrderResponse.deserializeBinary
);


/**
 * @param {!proto.CreateOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.OrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.OrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.OrderServiceClient.prototype.createOrder =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/OrderService/CreateOrder',
      request,
      metadata || {},
      methodDescriptor_OrderService_CreateOrder,
      callback);
};


/**
 * @param {!proto.CreateOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.OrderResponse>}
 *     Promise that resolves to the response
 */
proto.OrderServicePromiseClient.prototype.createOrder =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/OrderService/CreateOrder',
      request,
      metadata || {},
      methodDescriptor_OrderService_CreateOrder);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UpdateOrderRequest,
 *   !proto.OrderResponse1>}
 */
const methodDescriptor_OrderService_UpdateOrderById = new grpc.web.MethodDescriptor(
  '/OrderService/UpdateOrderById',
  grpc.web.MethodType.UNARY,
  proto.UpdateOrderRequest,
  proto.OrderResponse1,
  /**
   * @param {!proto.UpdateOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.OrderResponse1.deserializeBinary
);


/**
 * @param {!proto.UpdateOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.OrderResponse1)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.OrderResponse1>|undefined}
 *     The XHR Node Readable Stream
 */
proto.OrderServiceClient.prototype.updateOrderById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/OrderService/UpdateOrderById',
      request,
      metadata || {},
      methodDescriptor_OrderService_UpdateOrderById,
      callback);
};


/**
 * @param {!proto.UpdateOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.OrderResponse1>}
 *     Promise that resolves to the response
 */
proto.OrderServicePromiseClient.prototype.updateOrderById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/OrderService/UpdateOrderById',
      request,
      metadata || {},
      methodDescriptor_OrderService_UpdateOrderById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeleteOrderRequest,
 *   !proto.DeleteOrderResponse>}
 */
const methodDescriptor_OrderService_DeleteOrderById = new grpc.web.MethodDescriptor(
  '/OrderService/DeleteOrderById',
  grpc.web.MethodType.UNARY,
  proto.DeleteOrderRequest,
  proto.DeleteOrderResponse,
  /**
   * @param {!proto.DeleteOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeleteOrderResponse.deserializeBinary
);


/**
 * @param {!proto.DeleteOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeleteOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeleteOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.OrderServiceClient.prototype.deleteOrderById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/OrderService/DeleteOrderById',
      request,
      metadata || {},
      methodDescriptor_OrderService_DeleteOrderById,
      callback);
};


/**
 * @param {!proto.DeleteOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeleteOrderResponse>}
 *     Promise that resolves to the response
 */
proto.OrderServicePromiseClient.prototype.deleteOrderById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/OrderService/DeleteOrderById',
      request,
      metadata || {},
      methodDescriptor_OrderService_DeleteOrderById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetOrderRequest,
 *   !proto.OrderResponse>}
 */
const methodDescriptor_OrderService_GetOrderById = new grpc.web.MethodDescriptor(
  '/OrderService/GetOrderById',
  grpc.web.MethodType.UNARY,
  proto.GetOrderRequest,
  proto.OrderResponse,
  /**
   * @param {!proto.GetOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.OrderResponse.deserializeBinary
);


/**
 * @param {!proto.GetOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.OrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.OrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.OrderServiceClient.prototype.getOrderById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/OrderService/GetOrderById',
      request,
      metadata || {},
      methodDescriptor_OrderService_GetOrderById,
      callback);
};


/**
 * @param {!proto.GetOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.OrderResponse>}
 *     Promise that resolves to the response
 */
proto.OrderServicePromiseClient.prototype.getOrderById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/OrderService/GetOrderById',
      request,
      metadata || {},
      methodDescriptor_OrderService_GetOrderById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetAllOrdersRequest,
 *   !proto.AllOrderReponse>}
 */
const methodDescriptor_OrderService_GetAllOrders = new grpc.web.MethodDescriptor(
  '/OrderService/GetAllOrders',
  grpc.web.MethodType.UNARY,
  proto.GetAllOrdersRequest,
  proto.AllOrderReponse,
  /**
   * @param {!proto.GetAllOrdersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.AllOrderReponse.deserializeBinary
);


/**
 * @param {!proto.GetAllOrdersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.AllOrderReponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.AllOrderReponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.OrderServiceClient.prototype.getAllOrders =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/OrderService/GetAllOrders',
      request,
      metadata || {},
      methodDescriptor_OrderService_GetAllOrders,
      callback);
};


/**
 * @param {!proto.GetAllOrdersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.AllOrderReponse>}
 *     Promise that resolves to the response
 */
proto.OrderServicePromiseClient.prototype.getAllOrders =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/OrderService/GetAllOrders',
      request,
      metadata || {},
      methodDescriptor_OrderService_GetAllOrders);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UpdateOrderStatusRequest,
 *   !proto.UpdateOrderStatusResponse>}
 */
const methodDescriptor_OrderService_UpdateOrderStatusByOrderId = new grpc.web.MethodDescriptor(
  '/OrderService/UpdateOrderStatusByOrderId',
  grpc.web.MethodType.UNARY,
  proto.UpdateOrderStatusRequest,
  proto.UpdateOrderStatusResponse,
  /**
   * @param {!proto.UpdateOrderStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UpdateOrderStatusResponse.deserializeBinary
);


/**
 * @param {!proto.UpdateOrderStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UpdateOrderStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UpdateOrderStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.OrderServiceClient.prototype.updateOrderStatusByOrderId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/OrderService/UpdateOrderStatusByOrderId',
      request,
      metadata || {},
      methodDescriptor_OrderService_UpdateOrderStatusByOrderId,
      callback);
};


/**
 * @param {!proto.UpdateOrderStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UpdateOrderStatusResponse>}
 *     Promise that resolves to the response
 */
proto.OrderServicePromiseClient.prototype.updateOrderStatusByOrderId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/OrderService/UpdateOrderStatusByOrderId',
      request,
      metadata || {},
      methodDescriptor_OrderService_UpdateOrderStatusByOrderId);
};


module.exports = proto;

